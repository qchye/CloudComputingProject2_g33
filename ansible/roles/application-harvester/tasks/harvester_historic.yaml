# Project           : Gig Economy and its impact in Australia
# Team              : Group 33
# City              : Melbourne, Australia
# Authors           : Qing Feng Chye 770376, Sii Kim Lau 890511, Rohan Jahagirdar 835450
#                     Yun Liu 1046589, Shorye Chopra 689913
# Purpose           : Build and deploy Harvester used for harvesting historic data
---

- name: Create directory
  become: yes
  file:
    path: "{{ harvester_path }}/historic{{ service_index }}"
    recurse: yes
    state: directory
  when: " 'backend_nodes' in group_names"

- name: Copy files needed to build docker image on all backend nodes
  copy:
    src: "{{ item }}"
    dest: "{{ harvester_path }}/historic{{ service_index }}"
    owner: root
    group: root
    mode: 0755
  with_items:
    - couchdb_requests.py
    - TwitterHarvester.py
    - TwitterHarvesterFunc.py
    - requirements.txt
    - Dockerfile
  when: " 'backend_nodes' in group_names"

- name: Copy variables file
  template:
    src: "variables.json.j2"
    dest: "{{ harvester_path }}/historic{{ service_index }}/variables.json"
    mode: '0755'
  when: " 'backend_nodes' in group_names"

- name: Build image and with build args
  docker_image:
    name: harvester-historic{{ service_index }}:latest
    build:
      path: "{{ harvester_path }}/historic{{ service_index }}"
      pull: yes
      use_config_proxy: yes
    force: yes
    source: build
  when: " 'backend_nodes' in group_names"

- name: Remove existing service
  command:
    cmd: docker service rm harvester-historic{{ service_index }}
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"
  ignore_errors: yes
  
- name: Create Docker services for Historic Harvester
  become: yes
  command: "docker service create 
    --mode replicated 
    --replicas 1 
    --name harvester-historic{{ service_index }}  
    --constraint node.labels.type==backend
    --env FILE_TO_RUN='TwitterHarvester.py'
    {{ service_env_vars }}
    harvester-historic{{ service_index }}:latest"
  when: "inventory_hostname == groups['docker_swarm_manager'][0]"